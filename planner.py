import threading
import time

import capa
import dump_diff
import process
from const import FILENAME, PID, HAS_VALID_CERT


class TaskPlanner:
    def __init__(self, hook, process_connection, time_check_conn=2, time_overwrite=20):
        self.time_check_conn = time_check_conn
        self.time_overwrite = time_overwrite
        self.hook = hook
        self.pc = process_connection

    def run(self):
        threading.Thread(target=self.check_connection, args=()).start()
        threading.Thread(target=self.hook_func, args=()).start()
        threading.Thread(target=self.analysis_proc, args=()).start()
        threading.Thread(target=self.mitre_check(), args=()).start()

    def mitre_check(self):
        while True:
            while len(capa.mitre_queue):
                path_exe, pid = capa.mitre_queue.pop()
                capa_run = capa.Capa(path_exe=path_exe, pid=pid)
                capa_run.run()
                time.sleep(60)

    def hook_func(self):
        self.hook.run()

    def check_connection(self):
        while True:
            try:
                self.pc.check_new_connection()
            finally:
                time.sleep(self.time_check_conn)

    def analysis_proc(self):
        while True:
            while len(process.processing_queue):
                pid, pe, dump = process.processing_queue.pop()
                info = pe.analysis()
                value = dump_diff.compare_bin(pid, pe.filename, dump.get_exe())
                if value is not None:
                    equal, number = value
                    self.is_need_check_mitre(info, equal, number)
            time.sleep(5)

    def is_need_check_mitre(self, info, equal, number):
        if info[HAS_VALID_CERT]:
            return
        capa.mitre_queue.append([info[FILENAME], info[PID]])
