import threading
import time

import dump_diff
import process


class TaskPlanner:
    def __init__(self, hook, process_connection, time_check_conn=2, time_overwrite=20):
        self.time_check_conn = time_check_conn
        self.time_overwrite = time_overwrite
        self.hook = hook
        self.pc = process_connection

    def run(self):
        threading.Thread(target=self.check_connection, args=()).start()
        threading.Thread(target=self.hook_func, args=()).start()
        threading.Thread(target=self.analysis_proc, args=()).start()
        ##threading.Thread(target=self.overwriting_danger, args=()).start()

    def hook_func(self):
        self.hook.run()

    def check_connection(self):
        while True:
            try:
                self.pc.check_new_connection()
            finally:
                time.sleep(self.time_check_conn)

    def analysis_proc(self):
        while True:
            while len(process.processing_queue):
                pid, pe, dump = process.processing_queue.pop()
                pe.analysis()
                dump_diff.compare_bin(pid, pe.filename, dump.get_exe())
            time.sleep(5)
