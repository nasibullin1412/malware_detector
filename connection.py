import psutil
from ipwhois import IPWhois
import socket
import const
import danger_statistic
from check_ip import CheckIp


class ProcessConnection:
    def __init__(self):
        self.exists_connection = []
        self.pid_connection = []
        self.ip_info = {}
        self.__init_connection()

    def __init_connection(self):
        print('[init check connection...]')
        listPid = psutil.pids()

        for pid in listPid:
            try:
                conns = psutil.Process(pid).connections()

                for c in conns:
                    if not (pid, c.raddr) in self.exists_connection and\
                            c.raddr != ():
                        self.exists_connection.append((pid, c.raddr))
            finally:
                continue

    def check_new_connection(self):
        listPid = psutil.pids()

        for pid in listPid:
            try:
                conns = psutil.Process(pid).connections()

                for c in conns:
                    if pid not in self.pid_connection:
                        self.pid_connection.append(pid)

                    if not (pid, c.raddr) in self.exists_connection and \
                            c.raddr != ():
                        self.exists_connection.append((pid, c.raddr))
                        self.__fill_ip_info(c.raddr.ip)
                        print(f'  [{psutil.Process(pid).name()}][{pid}]:')
                        print(f'    [remote ip]:', c.raddr.ip)
                        print(f'    [remote port]:', c.raddr.port)
                        print(f'    [asn]:', self.ip_info[c.raddr.ip]['asn'])
                        print(f'    [asn country code]:', self.ip_info[c.raddr.ip]['asn_country_code'])
                        print(f'    [domain]:', self.ip_info[c.raddr.ip]['domain'])
                        check_ip = CheckIp(c.raddr.ip)
                        check_ip.check()
                        danger_statistic.add_ip_point(pid = pid, ip_point = check_ip.get_point())
            finally:
                continue

    def __fill_ip_info(self, ip):
        if ip not in self.ip_info.keys():
            try:
                obj = IPWhois(ip)
                res = obj.lookup_whois()
                try:
                    domain = socket.gethostbyaddr(ip)
                    res['domain'] = domain[0]
                except:
                    res['domain'] = ip
                self.ip_info[ip] = res
            finally:
                return
