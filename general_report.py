import json
from os import walk
from pathlib import Path

from config import WX_THRESHOLD, WEIGHT_OF_WX, WEIGHT_PACK, WEIGHT_DIFF_SUSPICIOUS, DIFF_SUSPICIOUS_THRESHOLD, \
    DIFF_BAD_THRESHOLD, WEIGHT_DIFF_BAD, IP_MALICIOUS_BAD_THRESHOLD, WEIGHT_BAD_IP, IP_MALICIOUS_SUSPICIOUS, \
    WEIGHT_SUSPICIOUS_IP, ORDER_THRESHOLD_DANGEROUS, ORDER_DANGEROUS_TEXT, ORDER_THRESHOLD_SUSPICIOUS, \
    ORDER_SUSPICIOUS_TEXT
from const import PID, EXE_DIFF_POINT, EXE_SECTION_NUMBER, IP, MALICIOUS, PROC_NAME, FILENAME, WX_SECTION, PACK, \
    HAS_VALID_CERT, GRADE


class GeneralReport:

    def __init__(self):
        self.filename = 'report\\general\\general_report'
        self.connection_report = 'report\\connection'
        self.info_report = 'report\\info'
        self.diff_report = 'report\\diff'

    def _handle_info_report(self):
        processes = []
        filenames = next(walk(self.info_report), (None, None, []))[2]
        for filename in filenames:
            with open(f'{self.info_report}\\{filename}') as json_data:
                d = json.load(json_data)
                processes.append(d)
                json_data.close()
        return processes

    def _handle_diff_report(self, processes):
        processes_with_diff = []
        for process in processes:
            filename = f'{self.diff_report}\\{process[PID]}'
            diff_report = Path(filename)
            if diff_report.exists():
                with open(filename) as json_data:
                    d = json.load(json_data)
                    process[EXE_DIFF_POINT] = d[EXE_DIFF_POINT]
                    process[EXE_SECTION_NUMBER] = d[EXE_SECTION_NUMBER]
                    json_data.close()
            else:
                process[EXE_DIFF_POINT] = None
                process[EXE_SECTION_NUMBER] = None
            processes_with_diff.append(process)
        return processes_with_diff

    def _handle_connection_report(self, processes):
        process_with_connection = []
        for process in processes:
            filename = f'{self.connection_report}\\{process[PROC_NAME]}'
            diff_report = Path(filename)
            if diff_report.exists():
                with open(filename) as json_data:
                    d = json.load(json_data)
                    process[IP] = d[IP]
                    process[MALICIOUS] = d[MALICIOUS]
                    json_data.close()
            else:
                process[IP] = None
                process[MALICIOUS] = None
            process_with_connection.append(process)
        return process_with_connection

    def _grade_processes(self, processes):
        processes_with_grade = []
        for process in processes:
            grade = 0
            if process[WX_SECTION] >= WX_THRESHOLD:
                grade += WEIGHT_OF_WX
            if process[PACK]:
                grade += WEIGHT_PACK
            if process[EXE_DIFF_POINT] is None:
                grade += WEIGHT_DIFF_SUSPICIOUS
            else:
                if process[EXE_DIFF_POINT] / process[EXE_SECTION_NUMBER] * 100 > DIFF_BAD_THRESHOLD:
                    grade += WEIGHT_DIFF_BAD
                else:
                    if process[EXE_DIFF_POINT] / process[EXE_SECTION_NUMBER] * 100 > DIFF_SUSPICIOUS_THRESHOLD:
                        grade += WEIGHT_DIFF_SUSPICIOUS
            if process[IP] is not None:
                if process[MALICIOUS] > IP_MALICIOUS_BAD_THRESHOLD:
                    grade += WEIGHT_BAD_IP
                else:
                    if process[MALICIOUS] > IP_MALICIOUS_SUSPICIOUS:
                        grade += WEIGHT_SUSPICIOUS_IP
            process[GRADE] = grade
            processes_with_grade.append(process)
        return processes_with_grade

    def group_by_proc_name(self, processes):
        group_by_name = {}
        for process in processes:
            if process[PROC_NAME] in group_by_name.keys():
                value = group_by_name[process[PROC_NAME]]
                value.append(process)
                group_by_name[process[PROC_NAME]] = value
            else:
                group_by_name[process[PROC_NAME]] = [process]
        return group_by_name

    def generate_report(self):
        processes = self._handle_info_report()
        processes = self._handle_diff_report(processes)
        processes = self._handle_connection_report(processes)
        processes = self._grade_processes(processes)
        group_by_name = self.group_by_proc_name(processes)
        self._print_as_table(processes)
        self._write_to_general_report(group_by_name)

    def _print_as_table(self, processes):
        for process in processes:
            print(process)

    def _write_to_general_report(self, group_by_name):
        with open(self.filename, "w") as report:
            for key in group_by_name.keys():
                process = group_by_name[key]
                total_order = 0
                report.write(f'PROCESS NAME: {process[0][PROC_NAME]}\n\n')
                for pid in process:
                    report.write(f'PID: {pid[PID]}\n')
                    report.write(f'PROCESS EXE FILE: {pid[FILENAME]}\n')
                    report.write(f'NUMBER OF WX SECTIONS: {pid[WX_SECTION]}\n')
                    report.write(f'IS PACKED: {pid[PACK]}\n')
                    report.write(f'HAS VALID CERT: {pid[HAS_VALID_CERT]}\n')
                    if pid[EXE_DIFF_POINT] is None:
                        report.write(f'FAILED TO COMPARE EXE WITH DUMP\n')
                    else:
                        report.write(
                            f'PERCENT OF MISMATCHED SECTORS EXE AND DUMP : {pid[EXE_DIFF_POINT] / pid[EXE_SECTION_NUMBER] * 100}%\n')
                    if pid[IP] is None:
                        report.write(f'HAS NOT GOT CONNECTIONS\n')
                    else:
                        report.write(f'THE MOST DANGEROUS CONNECTION WAS IDENTIFIED WITH THE ADDRESS: {pid[IP]} ')
                        report.write(f'HAS MALICIOUS: {pid[MALICIOUS]}\n')
                    report.write(f'ORDER: {pid[GRADE]}\n')
                    if pid[GRADE] >= ORDER_THRESHOLD_DANGEROUS:
                        report.write(f'{ORDER_DANGEROUS_TEXT} ')
                    elif pid[GRADE] >= ORDER_THRESHOLD_SUSPICIOUS:
                        report.write(f'{ORDER_SUSPICIOUS_TEXT}\n\n')
                    report.write('\n')
                    total_order += pid[GRADE]
                report.write(f'TOTAL ORDER: {total_order / len(process)}\n')
                report.write('=======================================================================================')
                report.write('\n\n')
