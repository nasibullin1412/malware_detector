import difflib
import json
import os
import shutil

import pefile
from capstone import Cs, CS_ARCH_X86, CS_MODE_64
from colorama import Fore, Style

differ = difflib.Differ()
md = Cs(CS_ARCH_X86, CS_MODE_64)
processing_queue = []


class Dump:
    def __init__(self, pid):
        self.pid = pid
        self.path_dump = None
        self.path_dir = f'dump\\{self.pid}'
        self.path_bdb_64 = "exe\\pd64.exe"
        self.path_bdb_32 = "exe\\pd32.exe"
        os.mkdir(self.path_dir)

    def get_dump(self):
        cmd64 = self.path_bdb_64 + " -pid " + str(self.pid) + ' -o ' + self.path_dir + " 1> temp.txt 2>null "
        try:
            os.system(cmd64)
        except:
            return

    def get_exe(self):
        for file in os.listdir(self.path_dir):
            if file[-4:] == ".exe":
                self.path_dump = self.path_dir + '\\' + file
                break
        else:
            self.path_dump = None
        return self.path_dump


def compare_bin(pid, path_1, path_2):
    if path_1 is None or path_2 is None:
        return None

    pe_exe = pefile.PE(path_1)
    pe_dump = pefile.PE(path_2)
    count = 0
    for i, (section1, section2) in enumerate(zip(pe_exe.sections, pe_dump.sections)):
        data_in_disk = section1.get_data()
        data_in_dump = section2.get_data()

        if data_in_disk != data_in_dump:
            count += 1
            print(f'{Fore.RED}[{pid}][compare section]: executable process sections are different from file sections ' +
                  f'(section {section1.Name.decode("utf-8")[:-3]}, {section2.Name.decode("utf-8")[:-3]}){Style.RESET_ALL}')
        else:
            print(f'{Fore.BLUE}[{pid}][compare section]: executable process sections are same from file sections ' +
                  f'(section {section1.Name.decode("utf-8")[:-3]}, {section2.Name.decode("utf-8")[:-3]}){Style.RESET_ALL}')
    with open(f'report\\diff\\{pid}', "a") as convert_file:
        convert_file.write(json.dumps({'Diff': count, 'Number': len(pe_exe.sections)}))
        convert_file.close()
    shutil.rmtree(f'dump\\{pid}', ignore_errors=True)
    return count, len(pe_exe.sections)
